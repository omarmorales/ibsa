// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// TODO: Verify model fields
// TODO: Verify model relations
model Product {
  id          String   @id @default(cuid()) @map("_id") @db.ObjectId
  name        String
  key         String   @unique
  description String?
  iva         Float?
  ieps        Float?
  isr         Float?
  sku         String
  price       Float
  p1          Float?
  p2          Float?
  p3          Float?
  p4          Float?
  p5          Float?
  c1          Float?
  c2          Float?
  c3          Float?
  c4          Float?
  quantity    Float?   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  purchases PurchaseProduct[]
  lineId    String?           @db.ObjectId
  line      Line?             @relation(fields: [lineId], references: [id])
  unitId    String?           @db.ObjectId
  unit      Unit?             @relation(fields: [unitId], references: [id])
}

model Unit {
  id          String    @id @default(cuid()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Line {
  id          String    @id @default(cuid()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Supplier {
  id          String     @id @default(cuid()) @map("_id")
  name        String
  rfc         String
  key         String     @unique
  phone       String
  email       String
  address     String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  purchases   Purchase[]
}

model Purchase {
  id              String   @id @default(cuid()) @map("_id") @db.ObjectId
  referenceNumber String?
  purchaseDate    DateTime
  supplierId      String
  total           Float
  status          String // Optional: Pending, Paid, Partial
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  supplier Supplier          @relation(fields: [supplierId], references: [id])
  products PurchaseProduct[]
}

model PurchaseProduct {
  id         String  @id @default(cuid()) @map("_id") @db.ObjectId
  purchaseId String  @db.ObjectId
  productId  String  @db.ObjectId
  quantity   Float
  cost       Float
  notes      String?

  // Relations
  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([purchaseId, productId])
}

// npx prisma db push
